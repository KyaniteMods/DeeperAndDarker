plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge{
        dataGen {
            mod "deeperdarker"
        }
        convertAccessWideners = true
        extraAccessWideners.add('deeperdarker.accesswidener')
    }

    launches {
        data {
            arg "--existing", project(":common").file("src/main/resources").absolutePath
        }
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    // GeckoLib
    modImplementation ("software.bernie.geckolib:geckolib-forge-1.19:3.1.23")

    // Paragon
    include modImplementation("maven.modrinth:paragon:forge-1.0.1b-1.19x")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}


task renameJarForPublication(type: Zip, dependsOn: remapJar) {
    from remapJar.archiveFile.map { zipTree(it) }
    extension "jar"
    metadataCharset "UTF-8"
    destinationDirectory = base.libsDirectory
    classifier project.name
}

assemble.dependsOn renameJarForPublication

unifiedPublishing {
    project {
        displayName = "[Forge $rootProject.minecraft_version] $project.version"
        releaseType = "release"
        changelog = releaseChangelog()
        gameVersions = ["${rootProject.minecraft_version}"]
        gameLoaders = ["forge"]
        mainPublication renameJarForPublication

        relations {
            depends {
                curseforge = "geckolib"
                modrinth = "geckolib"
            }
        }

        var CURSE_API_KEY = project.findProperty("CURSEFORGE_TOKEN") ?: System.getenv("CURSEFORGE_TOKEN")
        if (CURSE_API_KEY != null) {
            curseforge {
                token = CURSE_API_KEY
                id = rootProject.curseforge_id
                gameVersions.addAll "Java 17", "1.19", "1.19.1", "1.19.2"
            }
        }

        var MODRINTH_TOKEN = project.findProperty("MODRINTH_TOKEN") ?: System.getenv("MODRINTH_TOKEN")
        if (MODRINTH_TOKEN != null) {
            modrinth {
                token = MODRINTH_TOKEN
                id = rootProject.modrinth_id
                version = "$project.version+$project.name"
            }
        }
    }
}